-- Trigger all the errors that can be produced by checkTerm.

-- (t-the) --------------------------------------------------------------------
-- Error: type does not match ascription.
test type the #Nat of #true

-- (t-run) --------------------------------------------------------------------
-- Error: value to run is not a suspension.
test type run #true


-- (t-prm) --------------------------------------------------------------------
-- Error: unknown primitive.
test type #derp x

-- Error: unsaturated primitive operator.
test type #map'insert

-- Error: unsaturated primitive constructor.
test type #None


-- (t-con) --------------------------------------------------------------------
-- Error: unknown data constructor.
test type Derp


-- (t-var) --------------------------------------------------------------------
-- Error: unknown term variable.
test type x


-- (t-abt) --------------------------------------------------------------------
-- Error: parameter annotation from the wrong universe.
test type (λ@[a: #Nat] → #unit)

-- Error: parameter annotation is ill-formed.
test type (λ@[a: #Data #Data] → #unit)

-- Error: body must produce a value.
test type (λ@[a: #Data] → [])

-- Error: body is not pure.
test type (λ@[a: #Data] → do { #console'print "derp"; #unit })

-- Error: duplicate parameter names.
test type (λ@[a: #Data, a: #Data] → [])


-- (t-abm) --------------------------------------------------------------------
-- Error: parameter type in wrong universe.
test type (λ[x: #Data] → [])

-- Error: parameter annotation is ill kinded.
test type (λ[x: #Nat #Nat] → [])

-- Error: parameter annotation does not have data kind.
test type (λ[x: #Console] → [])

-- Error: body is not pure.
test type (λ[x: #Text] → #console'print "derp")

-- Error: duplciate parameter names
test type (λ[x: #Nat, x: #Nat] → [])


-- (t-aps) --------------------------------------------------------------------
-- Error: cannot apply a type vector.
test type [#true, #true] 3

-- (app term/types) -------------------
-- Error: cannot instantiate non-polymorphic value.
test type 5 @#Nat

-- Error: not enough arguments in type application.
test type (λ@[a: #Data, b: #Data] → #unit) @[#Nat]

-- Error: too many arguments in type application.
test type (λ@[a: #Data] → #unit) @[#Nat, #Nat]

-- Error: kind mismatch in application.
test type (λ@[a: #Data] → #unit) @#Console

-- (app term/terms) -------------------
-- Error: cannot apply non function.
test type 5 [1, 2]

-- Error: not enough arguments.
test type #bool'and [#true]

-- Error: too many arguments.
test type #bool'and [#true, #true, #true]

-- Error: wrong argument types.
test type #bool'and [1, 2]

-- (app term/term) --------------------
-- Error: cannot apply non function.
test type 5 5

-- Error: not enough arguments.
test type #bool'and #true

-- Error: too many arguments.
test type #bool'and ((λ[] → [#true, #true, #true]) [])

-- Error: wrong argument types.
test type #bool'and ((λ[] → [1, 2]) [])

-- Error: unsaturated primitive.
test type #map'insert

-- Error: unsaturated primitive.
test type #map'insert @[#Nat, #Nat]


-- (t-let) --------------------------------------------------------------------
-- Error: ill-kinded annotation.
test type let x: #Derp = #true; #true

-- Error: ill-typed bound expression.
test type let x = #true #true; #true

-- Error: wrong arity in binding.
-- TODO: we want the location of the binding group, not the let keyword,
-- same problem repeats below.
test type let [] = [#true]; #true

-- Error: wrong arity in binding.
test type let x = [#true, #true]; #true

-- Error: binder annotation does not match bound value.
test type let x: #Nat = #true; #true

-- Error: body term is ill-typed.
test type let x = #true; #true #true

-- Error: duplicate binder names.
test type let [x, x] = [#true, #true]; x


-- (t-rec) --------------------------------------------------------------------
-- Error: field type does not match expected type.
test type the [x: #Bool, y: #Nat] of [x = #true, y = #false]

-- Error: expected type is not a record type.
test type the #Nat of [x = #true, y = #false]

-- Error: duplicate fields in record
test type [x = 3, y = 3, x = 3]

-- Error: duplicate fields in record
test type [x = 3, y = 3, x = 3, y = 4]

-- Error: ill-typed field.
test type [x = #true #true]

-- Error: field type does not match expected type,
-- and we've looked through a synonym to see the expected type.
type recx: #Data = [x: #Nat, y: #Nat]
test type the recx of [x = 1, y = #true]


-- (t-prj) --------------------------------------------------------------------
-- Error: body does not have record type.
test type #true.x

-- Error: record does not have required field.
test type [x = 3].y

-- Error: body has too many values.
test type [1, 2].x


-- (t-vnt) --------------------------------------------------------------------
-- Error: ascribed type is ill kinded.
test type the #Nat #Nat of `foo #true

-- Error: ascribed type is not a variant type.
test type the #Nat of `foo #true

-- Error: alternative type does not match expected type.
test type the <foo: #Nat> of `foo #true

-- Error: alternative type does not match expected type.
test type the <foo: [#Nat, #Bool]> of `foo [3, 3]

-- Error: variant alternative is not in expected type.
test type the <bar: #Nat> of `foo 5


-- (t-cse-vnt) ----------------------------------------------------------------
-- Error: scrutinee is ill-typed.
test type case 2 2 of { one [] → [] }

-- Error: scrutinee does not have variant tpye.
test type case 2 of { one [] → [] }

-- Error: alternative is not in scrutinee type.
-- TODO: all these error locs are bad, we don't have a way to pass ranges
-- for the individual patterns and alts.
test type case (the <foo: #Nat> of `foo 5) of { bar [] → [] }

-- Error: pattern type does not match scrutinee type.
test type case (the <foo: #Nat> of `foo 5) of { foo [x: #Bool] → [] }

-- Error: case alternatives are overlapping.
test type case (the <foo: #Nat> of `foo 5) of
        { foo [x: #Bool] → []; foo [x: #Bool] → [] }

-- Error: case alts are inexhaustive.
test type case (the <foo: #Nat, bar: #Nat> of `foo 5) of
        { foo [x: #Nat] → [] }

-- Error: result types do not match.
test type case (the <foo: #Nat, bar: []> of `foo 5) of
        { foo [] → #true; bar [] → 5 }

-- Error: case alt does not have enough binders.
test type case (the <foo: [#Nat, #Nat]> of `foo [2, 3]) of
        { foo [x: #Nat] → x }

-- Error: case alt has too many binders.
test type case (the <foo: [#Nat, #Nat]> of `foo [2, 3]) of
        { foo [x: #Nat, y: #Nat, z: #Nat] → x }

-- Error: case alt has duplicate binders
test type case (the <foo: [#Nat, #Nat]> of `foo [2, 3]) of
        { foo [x: #Nat, x: #Nat] → x }


-- (t-ifs) --------------------------------------------------------------------
-- Error: scrutinee is ill-typed.
test type if 1 2 then #true else #true

-- Error: scrutinee is not a boolean.
test type if 5 then #true else #true

-- Error: branches do not have the same types.
test type if #true then #true else 5


-- (t-lst) --------------------------------------------------------------------
-- | Error: elem type is ill kinded.
test type [list (#Nat #Nat)|]

-- | Error: elem type does not have kind data.
test type [list #Console|]

-- | Error: element is ill typed.
test type [list #Nat| 3 3]

-- | Error: element type does not match annotation.
test type [list #Nat| #true]


-- (t-set) --------------------------------------------------------------------
-- | Error: elem type is ill kinded.
test type [set (#Nat #Nat)|]

-- | Error: elem type does not have kind data.
test type [set #Console|]

-- | Error: element is ill typed.
test type [set #Nat| 3 3]

-- | Error: element type does not match annotation.
test type [set #Nat| #true]


-- (t-map) --------------------------------------------------------------------
-- | Error: elem type is ill kinded.
test type [map (#Nat #Nat) #Nat|]

-- | Error: elem type does not have kind data.
test type [map #Console #Nat|]

-- | Error: element is ill typed.
test type [map #Nat #Nat| 3 3 := 3]

-- | Error: element type does not match annotation.
test type [map #Nat #Nat| 3 := #true]
