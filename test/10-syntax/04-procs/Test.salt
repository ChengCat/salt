-- Test syntax of procs.

-- TODO: support nested procedures.
-- TODO: procedure calls
-- TODO: make 'proc Stmt' imply 'proc [] of Stmt'

-- declarations ---------------------------------------------------------------
term decl1 [n: #Nat]: #Nat
 = proc #Nat of end with 5

term decl2 [n: #Nat]: []
 = proc [] of end

term decl3 [n: #Nat]: []
 = proc [] of end with []

term decl4 [n: #Nat]: [] ! #Console
 = box proc [] of seq #console'print "hello" end

term decl5 []: #Nat ! #Console
 = box proc #Nat of seq #console'print "hello" end with 5

-- sugar for the above.
proc decl1s [n: #Nat]: #Nat
 = end with 5

proc decl2s [n: #Nat]: []
 = end

proc decl3s [n: #Nat]: []
 = end with []

proc decl4s [n: #Nat]: []! #Console
 = seq #console'print "hello" end

proc decl5s []: #Nat ! #Console
 = seq #console'print "hello" end with 5


-- sequencing -----------------------------------------------------------------
-- simple sequencing
proc seq1 []: []! #Console
 =      seq #console'print "hello"
        seq #console'print "world"
        seq #console'print "derp"
        end


-- let-binding ----------------------------------------------------------------
proc let1 [x: #Nat, y: #Nat]: #Nat
 =      let a = #nat'add [x, y]
        let b = #nat'add [a, a]
        end with #nat'add [a, b]


-- cel-introduction -----------------------------------------------------------
-- TODO: allow type to be omitted, like with let bindings
proc cel1 [x: #Nat, y: #Nat]: #Nat
 =      cel a: #Nat ← 4
        cel b: #Nat ← 5
        end with #nat'add [a, b]


-- nested procedures ----------------------------------------------------------
-- TODO: need to be able to bind the result of a nested procedure.
proc nest1 []: []! #Console
 =      seq #console'print "good morning"
        seq proc [] of
            seq #console'print "hello"
            seq #console'print "world"
            end
        end


proc nest2 []: []! #Console
 =      seq #console'print "good morning"
        seq proc [] of
            seq #console'print "hello"
            seq proc [] of
                seq #console'print "world"
                end
            end
        end


-- if-statements --------------------------------------------------------------
proc if1 [b: #Bool, x: #Nat, y: #Nat]: #Nat
 =      seq if b then return x
        end with y

proc if2 [n: #Nat]: #Text ! #Console
 =      seq if #nat'eq [n, 1] then return "one"
        seq if #nat'eq [n, 2] then return "two"
        seq if #nat'eq [n, 3] then return "three"
        end with "dunno"

proc if3 [n: #Nat, m: #Nat]: #Text ! #Console
 =      seq if #nat'eq [n, 1]
                then if #nat'eq [m, 1]  then return "ones"
        seq if #nat'eq [n, 2]           then return "two"
        end with "whatever"

proc if4 [n: #Nat, m: #Nat]: #Text ! #Console
 =      seq if #nat'eq [n, 1] then
            seq if #nat'eq [m, 1]       then return "one, one"
            seq if #nat'eq [m, 2]       then return "one, two"
            end
        seq if #nat'eq [n, 2]           then return "two"
        end with "whatever"

