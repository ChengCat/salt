

-- Factorial using tail recursion.
term fac1 [x: #Nat]: #Nat
 = if #nat'eq [x, 0]
   then 1
   else #nat'mul [x, fac1 [#nat'sub [x, 1]]]

test eval fac1 10


-- Factorial using procedural loop.
term fac2 [x: #Nat]: #Nat
 = proc launch #Nat of
   do   cell n: #Nat ← 10
        cell x: #Nat ← 1
        loop do
                when #nat'eq [n, 0] break
                x ← #nat'mul [x, n]
                n ← #nat'sub [n, 1]
        return x

test eval fac2 10


-- Factorial using enter/leave.
--proc fac2 [n: #Nat]: #Nat
-- = do   cell acc: #Nat ← n
--        cell x:   #Nat ← n
--        enter fac []
--         with fac []: [] = do
--                when #nat'eq [x, 0] do leave
--                acc ← #nat'mul [acc, x]
--                x   ← #nat'sub [x,   1]
--                fac []
--        yield acc

