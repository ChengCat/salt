

-- Factorial using procedural loop.
test eval proc launch #Nat of
 do     cell n: #Nat ← 10
        cell x: #Nat ← 1
        loop do
                when #nat'eq [n, 0] break
                x ← #nat'mul [x, n]
                n ← #nat'sub [n, 1]
        return x


-- Draw a square, using loop syntax.
proc square [] : []! #Console
 = do   cell x: #Nat ← 9
        loop do
                when #nat'eq [x, 0] break
                x ← #nat'sub [x, 1]
                cell y: #Nat ← 9
                loop do
                        when #nat'eq [y, 0] break
                        y ← #nat'sub [y, 1]
                        #console'print "o"
                #console'print "\n"
        #console'print "\n"

test exec square []


-- Draw a square, using while syntax.
proc square2 [] : []! #Console
 = do   cell x: #Nat ← 9
        while #nat'gt [x, 0] do
                x ← #nat'sub [x, 1]
                cell y: #Nat ← 9
                while #nat'gt [y, 0] do
                        y ← #nat'sub [y, 1]
                        #console'print "x"
                #console'print "\n"

test exec square2 []