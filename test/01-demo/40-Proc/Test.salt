

proc fac [n: #Nat]: #Nat
 = if   { #nat'eq [n, 0] → 4
        ; otherwise      → #nat'mul [n, fac [#nat'sub [n, 1]]] }


-- proc derp [n: #Nat]: #Nat
--  = let x: #Nat = 4;
--
--    do   let x = thing;
--         when { #nat'eq [3, 4] → do #console'print "derp"; [] done
--              ; #nat'eq [x, t] → return 5 };
--
--         when case x of
--              { foo → #console'print "Derp"
--              ; bar → #console'print "derp" };
--
--         loop do
--              when (#bool'not [#nat'eq [x, y]]) break;
--              x ← #nat'add [x, y];
--              y ← 4;
--         done;
--
--         cell x: #Nat ← #nat'add [x, y];
--         x ← #nat'add [x, y];
--
--         #console'print "derp";
--   done


