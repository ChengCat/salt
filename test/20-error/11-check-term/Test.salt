
-- Trigger all the errors that can be produced by checkTerm.

-- (t-the) --------------------------------------------------------------------
-- Error: type does not match ascription.
test type the #Nat. #true


-- (t-run) --------------------------------------------------------------------
-- Error: value to run is not a suspension.
test type run #true


-- (t-prm) --------------------------------------------------------------------
-- Error: unknown primitive.
test type #derp

-- Error: unsaturated primitive operator.
test type #map'insert

-- Error: unsaturated primitive constructor.
test type #None


-- (t-con) --------------------------------------------------------------------
-- Error: unknown data constructor.
test type Derp


-- (t-var) --------------------------------------------------------------------
-- Error: unknown term variable.
test type x


-- (t-abt) --------------------------------------------------------------------
-- Error: parameter annotation from the wrong universe.
test type (λ@[a: #Nat] → #unit)

-- Error: parameter annotation is ill-formed.
test type (λ@[a: #Data #Data] → #unit)

-- Error: body must produce a value.
test type (λ@[a: #Data] → [])

-- Error: body is not pure.
test type (λ@[a: #Data] → do { #console'print "derp"; #unit })


-- (t-abm) --------------------------------------------------------------------
-- Error: parameter type in wrong universe.
test type (λ[x: #Data] → [])

-- Error: parameter annotation is ill kinded.
test type (λ[x: #Nat #Nat] → [])

-- Error: parameter annotation does not have data kind.
test type (λ[x: #Console] → [])

-- Error: body is not pure.
test type (λ[x: #Text] → #console'print "derp")


-- (t-aps) --------------------------------------------------------------------
-- Error: cannot apply a type vector.
test type [#true, #true] 3

-- Error: there must be some arguments in the application,
-- but a term without any is not syntactically well formed,
-- so we can't test for it.

-- (app term/types) -------------------
-- Error: cannot instantiate non-polymorphic value.
test type 5 @#Nat

-- Error: not enough arguments in type application.
test type (λ@[a: #Data, b: #Data] → #unit) @[#Nat]

-- Error: too many arguments in type application.
test type (λ@[a: #Data] → #unit) @[#Nat, #Nat]

-- Error: kind mismatch in application.
test type (λ@[a: #Data] → #unit) @#Console

-- (app term/terms) -------------------
-- Error: cannot apply non function.
test type 5 [1, 2]

-- Error: not enough arguments.
test type #bool'and [#true]

-- Error: too many arguments.
test type #bool'and [#true, #true, #true]

-- Error: wrong argument types.
test type #bool'and [1, 2]

-- (app term/term) --------------------
-- Error: cannot apply non function.
test type 5 5

-- Error: not enough arguments.
test type #bool'and #true

-- Error: too many arguments.
test type #bool'and ((λ[] → [#true, #true, #true]) [])

-- Error: wrong argument types.
test type #bool'and ((λ[] → [1, 2]) [])

-- Error: unsaturated primitive.
test type #map'insert

-- Error: unsaturated primitive.
test type #map'insert @[#Nat, #Nat]


-- (t-let) --------------------------------------------------------------------
-- Error: ill-kinded annotation.
test type let x: #Derp = #true; #true

-- Error: ill-typed bound expression.
test type let x = #true #true; #true

-- Error: wrong arity in binding.
test type let [] = [#true]; #true

-- Error: wrong arity in binding.
test type let x = [#true, #true]; #true

-- Error: binder annotation does not match bound value.
test type let x: #Nat = #true; #true

-- Error: body term is ill-typed.
test type let x = #true; #true #true


-- (t-rec) --------------------------------------------------------------------
-- Error: field type does not match expected type.
test type the [x: #Bool, y: #Nat]. [x = #true, y = #false]

-- Error: expected type is not a record type.
test type the #Nat. [x = #true, y = #false]

-- Error: duplicate fields in record
test type [x = 3, y = 3, x = 3]

-- Error: duplicate fields in record
test type [x = 3, y = 3, x = 3, y = 4]

-- Error: ill-typed field.
test type [x = #true #true]


-- (t-prj) --------------------------------------------------------------------
-- Error: body does not have record type.
test type #true.x

-- Error: record does not have required field.
test type [x = 3].y

-- Error: body has too many values.
test type [1, 2].x




