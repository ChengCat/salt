-- Testing primitive operations

-- Boolean primitives
test assert bool'not1   = #bool'not [#false]
test assert bool'not2   = #bool'not [#bool'not [#true]]
test assert bool'and1   = #bool'and [#true, #true]
test assert bool'and2   = #bool'and [#bool'not [#false], #true]
test assert bool'or1    = #bool'or  [#false, #true]
test assert bool'or2    = #bool'or  [#true,  #false]
test assert bool'eq1    = #bool'eq  [#true,  #true]
test assert bool'eq2    = #bool'eq  [#false, #false]

-- Nat primitives
test assert nat'eq1     = #nat'eq   [1, 1]
test assert nat'eq2     = #bool'not [#nat'eq [1, 2]]
test assert nat'neq     = #nat'neq  [1, 2]
test assert nat'add     = #nat'eq   [3, #nat'add [1, 2]]
test assert nat'sub     = #nat'eq   [3, #nat'sub [7, 4]]
test assert nat'mul     = #nat'eq   [8, #nat'mul [2, 4]]
test assert nat'lt1     = #nat'lt   [4, 5]
test assert nat'lt2     = #bool'not [#nat'lt [4, 4]]
test assert nat'le      = #nat'le   [4,  4]
test assert nat'gt1     = #nat'gt   [10, 8]
test assert nat'gt2     = #bool'not [#nat'gt [4, 4]]
test assert nat'ge      = #nat'ge   [4, 4]

-- Int primitives
test assert int'eq1     = #int'eq   [#int 1, #int 1]
test assert int'eq2     = #bool'not [#int'eq [#int 1, #int 2]]
test assert int'neq     = #int'neq  [#int 1, #int 2]
test assert int'add     = #int'eq   [#int 3, #int'add [#int 1, #int 2]]
test assert int'sub     = #int'eq   [#int 3, #int'sub [#int 7, #int 4]]
test assert int'mul     = #int'eq   [#int 8, #int'mul [#int 2, #int 4]]
test assert int'lt1     = #int'lt   [#int 4, #int 5]
test assert int'lt2     = #bool'not [#int'lt [#int 4, #int 4]]
test assert int'le      = #int'le   [#int 4,  #int 4]
test assert int'gt1     = #int'gt   [#int 10, #int 8]
test assert int'gt2     = #bool'not [#int'gt [#int 4, #int 4]]
test assert int'ge      = #int'ge   [#int 4, #int 4]

-- Int8 primitives
test assert int8'eq1     = #int8'eq  [#int8 1, #int8 1]
test assert int8'eq2     = #bool'not [#int8'eq [#int8 1, #int8 2]]
test assert int8'neq     = #int8'neq [#int8 1, #int8 2]
test assert int8'add     = #int8'eq  [#int8 3, #int8'add [#int8 1, #int8 2]]
test assert int8'sub     = #int8'eq  [#int8 3, #int8'sub [#int8 7, #int8 4]]
test assert int8'mul     = #int8'eq  [#int8 8, #int8'mul [#int8 2, #int8 4]]
test assert int8'lt1     = #int8'lt  [#int8 4, #int8 5]
test assert int8'lt2     = #bool'not [#int8'lt [#int8 4, #int8 4]]
test assert int8'le      = #int8'le  [#int8 4,  #int8 4]
test assert int8'gt1     = #int8'gt  [#int8 10, #int8 8]
test assert int8'gt2     = #bool'not [#int8'gt [#int8 4, #int8 4]]
test assert int8'ge      = #int8'ge  [#int8 4, #int8 4]

-- Int16 primitives
test assert int16'eq1     = #int16'eq  [#int16 1, #int16 1]
test assert int16'eq2     = #bool'not  [#int16'eq [#int16 1, #int16 2]]
test assert int16'neq     = #int16'neq [#int16 1, #int16 2]
test assert int16'add     = #int16'eq  [#int16 3, #int16'add [#int16 1, #int16 2]]
test assert int16'sub     = #int16'eq  [#int16 3, #int16'sub [#int16 7, #int16 4]]
test assert int16'mul     = #int16'eq  [#int16 8, #int16'mul [#int16 2, #int16 4]]
test assert int16'lt1     = #int16'lt  [#int16 4, #int16 5]
test assert int16'lt2     = #bool'not  [#int16'lt [#int16 4, #int16 4]]
test assert int16'le      = #int16'le  [#int16 4,  #int16 4]
test assert int16'gt1     = #int16'gt  [#int16 10, #int16 8]
test assert int16'gt2     = #bool'not  [#int16'gt [#int16 4, #int16 4]]
test assert int16'ge      = #int16'ge  [#int16 4, #int16 4]

-- Int32 primitives
test assert int32'eq1     = #int32'eq  [#int32 1, #int32 1]
test assert int32'eq2     = #bool'not  [#int32'eq [#int32 1, #int32 2]]
test assert int32'neq     = #int32'neq [#int32 1, #int32 2]
test assert int32'add     = #int32'eq  [#int32 3, #int32'add [#int32 1, #int32 2]]
test assert int32'sub     = #int32'eq  [#int32 3, #int32'sub [#int32 7, #int32 4]]
test assert int32'mul     = #int32'eq  [#int32 8, #int32'mul [#int32 2, #int32 4]]
test assert int32'lt1     = #int32'lt  [#int32 4, #int32 5]
test assert int32'lt2     = #bool'not  [#int32'lt [#int32 4, #int32 4]]
test assert int32'le      = #int32'le  [#int32 4,  #int32 4]
test assert int32'gt1     = #int32'gt  [#int32 10, #int32 8]
test assert int32'gt2     = #bool'not  [#int32'gt [#int32 4, #int32 4]]
test assert int32'ge      = #int32'ge  [#int32 4, #int32 4]

-- Int64 primitives
test assert int64'eq1     = #int64'eq  [#int64 1, #int64 1]
test assert int64'eq2     = #bool'not  [#int64'eq [#int64 1, #int64 2]]
test assert int64'neq     = #int64'neq [#int64 1, #int64 2]
test assert int64'add     = #int64'eq  [#int64 3, #int64'add [#int64 1, #int64 2]]
test assert int64'sub     = #int64'eq  [#int64 3, #int64'sub [#int64 7, #int64 4]]
test assert int64'mul     = #int64'eq  [#int64 8, #int64'mul [#int64 2, #int64 4]]
test assert int64'lt1     = #int64'lt  [#int64 4, #int64 5]
test assert int64'lt2     = #bool'not  [#int64'lt [#int64 4, #int64 4]]
test assert int64'le      = #int64'le  [#int64 4,  #int64 4]
test assert int64'gt1     = #int64'gt  [#int64 10, #int64 8]
test assert int64'gt2     = #bool'not  [#int64'gt [#int64 4, #int64 4]]
test assert int64'ge      = #int64'ge  [#int64 4, #int64 4]

-- Word primitives
test assert word'eq1     = #word'eq  [#word 1, #word 1]
test assert word'eq2     = #bool'not [#word'eq [#word 1, #word 2]]
test assert word'neq     = #word'neq [#word 1, #word 2]
test assert word'add     = #word'eq  [#word 3, #word'add [#word 1, #word 2]]
test assert word'sub     = #word'eq  [#word 3, #word'sub [#word 7, #word 4]]
test assert word'mul     = #word'eq  [#word 8, #word'mul [#word 2, #word 4]]
test assert word'lt1     = #word'lt  [#word 4, #word 5]
test assert word'lt2     = #bool'not [#word'lt [#word 4, #word 4]]
test assert word'le      = #word'le  [#word 4,  #word 4]
test assert word'gt1     = #word'gt  [#word 10, #word 8]
test assert word'gt2     = #bool'not [#word'gt [#word 4, #word 4]]
test assert word'ge      = #word'ge  [#word 4, #word 4]

-- Word8 primitives
test assert word8'eq1     = #word8'eq  [#word8 1, #word8 1]
test assert word8'eq2     = #bool'not  [#word8'eq [#word8 1, #word8 2]]
test assert word8'neq     = #word8'neq [#word8 1, #word8 2]
test assert word8'add     = #word8'eq  [#word8 3, #word8'add [#word8 1, #word8 2]]
test assert word8'sub     = #word8'eq  [#word8 3, #word8'sub [#word8 7, #word8 4]]
test assert word8'mul     = #word8'eq  [#word8 8, #word8'mul [#word8 2, #word8 4]]
test assert word8'lt1     = #word8'lt  [#word8 4, #word8 5]
test assert word8'lt2     = #bool'not  [#word8'lt [#word8 4, #word8 4]]
test assert word8'le      = #word8'le  [#word8 4,  #word8 4]
test assert word8'gt1     = #word8'gt  [#word8 10, #word8 8]
test assert word8'gt2     = #bool'not  [#word8'gt [#word8 4, #word8 4]]
test assert word8'ge      = #word8'ge  [#word8 4, #word8 4]

-- Word16 primitives
test assert word16'eq1     = #word16'eq  [#word16 1, #word16 1]
test assert word16'eq2     = #bool'not   [#word16'eq [#word16 1, #word16 2]]
test assert word16'neq     = #word16'neq [#word16 1, #word16 2]
test assert word16'add     = #word16'eq  [#word16 3, #word16'add [#word16 1, #word16 2]]
test assert word16'sub     = #word16'eq  [#word16 3, #word16'sub [#word16 7, #word16 4]]
test assert word16'mul     = #word16'eq  [#word16 8, #word16'mul [#word16 2, #word16 4]]
test assert word16'lt1     = #word16'lt  [#word16 4, #word16 5]
test assert word16'lt2     = #bool'not   [#word16'lt [#word16 4, #word16 4]]
test assert word16'le      = #word16'le  [#word16 4,  #word16 4]
test assert word16'gt1     = #word16'gt  [#word16 10, #word16 8]
test assert word16'gt2     = #bool'not   [#word16'gt [#word16 4, #word16 4]]
test assert word16'ge      = #word16'ge  [#word16 4, #word16 4]

-- Word32 primitives
test assert word32'eq1     = #word32'eq  [#word32 1, #word32 1]
test assert word32'eq2     = #bool'not   [#word32'eq [#word32 1, #word32 2]]
test assert word32'neq     = #word32'neq [#word32 1, #word32 2]
test assert word32'add     = #word32'eq  [#word32 3, #word32'add [#word32 1, #word32 2]]
test assert word32'sub     = #word32'eq  [#word32 3, #word32'sub [#word32 7, #word32 4]]
test assert word32'mul     = #word32'eq  [#word32 8, #word32'mul [#word32 2, #word32 4]]
test assert word32'lt1     = #word32'lt  [#word32 4, #word32 5]
test assert word32'lt2     = #bool'not   [#word32'lt [#word32 4, #word32 4]]
test assert word32'le      = #word32'le  [#word32 4,  #word32 4]
test assert word32'gt1     = #word32'gt  [#word32 10, #word32 8]
test assert word32'gt2     = #bool'not   [#word32'gt [#word32 4, #word32 4]]
test assert word32'ge      = #word32'ge  [#word32 4, #word32 4]

-- Word64 primitives
test assert word64'eq1     = #word64'eq  [#word64 1, #word64 1]
test assert word64'eq2     = #bool'not   [#word64'eq [#word64 1, #word64 2]]
test assert word64'neq     = #word64'neq [#word64 1, #word64 2]
test assert word64'add     = #word64'eq  [#word64 3, #word64'add [#word64 1, #word64 2]]
test assert word64'sub     = #word64'eq  [#word64 3, #word64'sub [#word64 7, #word64 4]]
test assert word64'mul     = #word64'eq  [#word64 8, #word64'mul [#word64 2, #word64 4]]
test assert word64'lt1     = #word64'lt  [#word64 4, #word64 5]
test assert word64'lt2     = #bool'not   [#word64'lt [#word64 4, #word64 4]]
test assert word64'le      = #word64'le  [#word64 4,  #word64 4]
test assert word64'gt1     = #word64'gt  [#word64 10, #word64 8]
test assert word64'gt2     = #bool'not   [#word64'gt [#word64 4, #word64 4]]
test assert word64'ge      = #word64'ge  [#word64 4, #word64 4]

-- Symbol primitives
test assert symbol'eq1  = #symbol'eq ['foo, 'foo]
test assert symbol'eq2  = #bool'not  [#symbol'eq ['foo, 'bar]]
