
-- term derp [n: #Nat]: #Nat ! #Console
--  = box  proc #Nat of
--    let  x = 5
--    let  y = the <foo: #Nat> of `foo 4
--    seq  #console'print "derp"
--    seq  if #nat'eq [x, 0] then return 3
--
--    cel  n: #Nat ← 0
--    seq  loop
--         seq if #nat'gt [n, 5] then break
--         seq #console'print "hello"
--         end
--
--    seq  case y of { foo [x: #Nat] → return x }
--
--    end  with 5


-- term derp [n: #Nat]: #Nat ! #Console
--  = box proc #Nat of
--    seq {
--         let x = 5;
--         let y = the <foo: #Nat> of `foo 4;
--         #console'print "derp";
--         if #nat'eq [x, 0] then return 3;
--         case y of { foo [x: #Nat] → return x }
--         cel n : #Nat ← 0
--         return 5
--    }


